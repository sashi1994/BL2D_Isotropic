%ecriture inp
function Write_INP_Function(nodes, elements, locked, Cloadx, Cloady, Dloadx, Dloady, material, section)
% nodes : n lignes x 3 colonnes : colonne 1 : no des noeuds, colonne 2 et 3 coordonnées x et y
% elements : m lignes x 3 colonnes : colonne 1 : no des éléments, colonne 2 et 3 indices des noeuds début et fin
% locked = noeuds bloqués : p lignes x 3 colonnes : colonne 1 : no des éléments, colonne 2 = 1 si bloqué en X et colonne 3 = 1 si bloqué en Y
% Cload = concentrated load : p lignes x 1 colonnes : entete = valeur puis les noeuds
% Dloadx et Dloady = distributed load : p lignes x 1 colonnes : entete = valeur puis les noeuds
% material = Module d'Young et Coefficient de Poisson
% section = largeur et hauteur

incelset = 2;
incnset = 2;
incBC=1;
nset_cloadx = 0;
nset_cloady = 0;
elset_dloadx = 0;
elset_dloady = 0;
nset_xy=0;
nset_x=0;
nset_y=0;

fid=fopen('auto_inp.inp','w'); %ouvrir/créer le fichier input
%Ecriture de l'entête
fprintf(fid,'%s\r\n','*Heading');
fprintf(fid,'%s\r\n','** Job name: Test_1 Model name: Model-1');
fprintf(fid,'%s\r\n','** Generated by: Abaqus/CAE Student Edition 2017');
fprintf(fid,'%s\r\n','*Preprint, echo=NO, model=NO, history=NO, contact=NO');
fprintf(fid,'%s\r\n','**');
fprintf(fid,'%s\r\n','** PARTS');
fprintf(fid,'%s\r\n','**');
fprintf(fid,'%s\r\n','*Part, name=Part-1');
fprintf(fid,'%s\r\n','*End Part');
fprintf(fid,'%s\r\n','**  ');
fprintf(fid,'%s\r\n','**');
fprintf(fid,'%s\r\n','** ASSEMBLY');
fprintf(fid,'%s\r\n','**');
fprintf(fid,'%s\r\n','*Assembly, name=Assembly');
fprintf(fid,'%s\r\n','**  ');
fprintf(fid,'%s\r\n','*Instance, name=Part-1-1, part=Part-1');
%Ecriture des noeuds 
fprintf(fid,'%s\r\n','*Node');
%Génération des noeuds 
for i=1:size(nodes,1)
    fprintf(fid,'%s\r\n',['     ',int2str(nodes(i,1)),',  ',num2str(nodes(i,2)),',  ',num2str(nodes(i,3))]);
end
%Ecriture des élément    
fprintf(fid,'%s\r\n','*Element, type=B21');
%Génération des elements
for i=1:size(elements,1)
    fprintf(fid,'%s\r\n',['     ',int2str(elements(i,1)),',  ',int2str(elements(i,2)),',  ',int2str(elements(i,3))]);
end
%Ecriture des ensembles
%Ensemble des noeuds de la structure entière
fprintf(fid,'%s\r\n','*Nset, nset=Set-1');
for i=1:size(nodes,1)
    fprintf(fid,'%s\r\n',[int2str(nodes(i,1)),',  ']);
end
%Ensemble des éléments de la structure entière
fprintf(fid,'%s\r\n',' ');
fprintf(fid,'%s\r\n','*Elset, elset=Set-1');
for i=1:size(elements,1)
    fprintf(fid,'%s\r\n',[int2str(elements(i,1)),',  ']);
end
%Définition de la section
fprintf(fid,'%s\r\n',' ');
fprintf(fid,'%s\r\n','** Section: Section-1  Profile: Profile-1');
fprintf(fid,'%s','*Beam Section, elset=Set-1, material = PLA');
% fprintf(fid,'%s',[', poisson = ',num2str(material(2),2)]);
% fprintf(fid,'%s',Coef_Poisson);
fprintf(fid,'%s\r\n',', temperature=GRADIENTS, section=RECT');
fprintf(fid,'%s\r\n',[num2str(section(1),2),', ', num2str(section(2),2)]);
fprintf(fid,'%s\r\n','0.,0.,-1.');
fprintf(fid,'%s\r\n','*End Instance');
fprintf(fid,'%s\r\n','**  ');


%Ensemble de noeud(s) soumis à la force concentrée suivant la direction 1
if size(Cloadx,1)>0
    fprintf(fid,'%s\r\n',['*Nset, nset=Set-',int2str(incnset),', instance=Part-1-1']);
    for i=2:size(Cloadx,1)
        fprintf(fid,'%s\r\n',[int2str(nodes(Cloadx(i),1)),', ']);
    end
    nset_cloadx=incnset;
    incnset=incnset+1;
end
%Ensemble de noeud(s) soumis à la force concentrée suivant la direction 2
if size(Cloady,1)>0
    fprintf(fid,'%s\r\n',['*Nset, nset=Set-',int2str(incnset),', instance=Part-1-1']);
    for i=2:size(Cloady,1)
        fprintf(fid,'%s\r\n',[int2str(nodes(Cloady(i),1)),', ']);
    end
    nset_cloady=incnset;
    incnset=incnset+1;
end
%Ensemble de elements(s) soumis à la force distribuée en x
if size(Dloadx,1)>0
    fprintf(fid,'%s\r\n',['*Elset, elset=Set-',int2str(incelset),', instance=Part-1-1']);
    for i=2:size(Dloadx,1)
        fprintf(fid,'%s\r\n',[int2str(elements(Dloadx(i),1)),', ']);
    end
    elset_dloadx=incelset;
    incelset=incelset+1;
end
%Ensemble de elements(s) soumis à la force distribuée en y
if size(Dloady,1)>0
    fprintf(fid,'%s\r\n',['*Elset, elset=Set-',int2str(incelset),', instance=Part-1-1']);
    for i=2:size(Dloady,1)
        fprintf(fid,'%s\r\n',[int2str(elements(Dloady(i),1)),', ']);
    end
    elset_dloady=incelset;
    incelset=incelset+1;
end

%Ensemble de noeud(s) bloqués en translation selon X et Y
fprintf(fid,'%s\r\n',' ');
k_nodes=find(locked(:,2)==1 & locked(:,3)==1);
if size(k_nodes,1)>0
    fprintf(fid,'%s\r\n',['*Nset, nset=Set-',int2str(incnset),', instance=Part-1-1']);
    for i=1:size(k_nodes,1)
        fprintf(fid,'%s\r\n',[int2str(locked(k_nodes(i),1)),', ']);
    end
    nset_xy=incnset;
    incnset=incnset+1;
end
%Ensemble de noeud(s) bloqués en translation selon X
k_nodes=find(locked(:,2)==1 & locked(:,3)==0);
if size(k_nodes,1)>0
    fprintf(fid,'%s\r\n',['*Nset, nset=Set-',int2str(incnset),', instance=Part-1-1']);
    for i=1:size(k_nodes,1)
        fprintf(fid,'%s\r\n',[int2str(locked(k_nodes(i),1)),', ']);
    end
    nset_x=incnset;
    incnset=incnset+1;
end
%Ensemble de noeud(s) bloqués en translation selon Y
k_nodes=find(locked(:,2)==0 & locked(:,3)==1);
if size(k_nodes,1)>0
    fprintf(fid,'%s\r\n',['*Nset, nset=Set-',int2str(incnset),', instance=Part-1-1']);
    for i=1:size(k_nodes,1)
        fprintf(fid,'%s\r\n',[int2str(locked(k_nodes(i),1)),', ']);
    end
    nset_y=incnset;
    incnset=incnset+1;
end
fprintf(fid,'%s\r\n','*End Assembly');
fprintf(fid,'%s\r\n','** ');

%Définition du matériau
fprintf(fid,'%s\r\n','** MATERIALS');
fprintf(fid,'%s\r\n','** ');
fprintf(fid,'%s\r\n','*Material, name = PLA');
fprintf(fid,'%s\r\n','*Elastic');
fprintf(fid,'%s\r\n',[num2str(material(1),2),', ',num2str(material(2),2)]);
% fprintf(fid,'%s',Module_Young,', ');
% fprintf(fid,'%s\r\n',Coef_Poisson);
fprintf(fid,'%s\r\n','** ----------------------------------------------------------------');
fprintf(fid,'%s\r\n','** ');
%Début du Step
fprintf(fid,'%s\r\n','** STEP: Step-1');
fprintf(fid,'%s\r\n','** ');
fprintf(fid,'%s\r\n','*Step, name=Step-1, nlgeom=NO, perturbation');
fprintf(fid,'%s\r\n','*Static');
fprintf(fid,'%s\r\n','** ');
%Définition des CL 
fprintf(fid,'%s\r\n','** BOUNDARY CONDITIONS');
fprintf(fid,'%s\r\n','** ');
if nset_xy>0
    fprintf(fid,'%s\r\n',['** Name: BC-',int2str(incBC),' Type: Displacement/Rotation']);
    fprintf(fid,'%s\r\n','*Boundary');
    fprintf(fid,'%s\r\n',['Set-',int2str(nset_xy),', 1, 1']);
    fprintf(fid,'%s\r\n',['Set-',int2str(nset_xy),', 2, 2']);
    incBC=incBC+1;
end
if nset_x>0
    fprintf(fid,'%s\r\n',['** Name: BC-',int2str(incBC),' Type: Displacement/Rotation']);
    fprintf(fid,'%s\r\n','*Boundary');
    fprintf(fid,'%s\r\n',['Set-',int2str(nset_x),', 1, 1']);
    incBC=incBC+1;
end
if nset_y>0
    fprintf(fid,'%s\r\n',['** Name: BC-',int2str(incBC),' Type: Displacement/Rotation']);
    fprintf(fid,'%s\r\n','*Boundary');
    fprintf(fid,'%s\r\n',['Set-',int2str(nset_y),', 2, 2']);
    incBC=incBC+1;
end
fprintf(fid,'%s\r\n','** ');
%Définition du chargement
fprintf(fid,'%s\r\n','** LOADS');
fprintf(fid,'%s\r\n','** ');
if nset_cloadx>0
    fprintf(fid,'%s\r\n','** Name: Load-1   Type: Node load');
    fprintf(fid,'%s\r\n','*Cload');
    fprintf(fid,'%s\r\n',['Set-',int2str(nset_cloadx),', 1, ',num2str(Cloadx(1),2),',']);
    fprintf(fid,'%s\r\n','** ');
end
if nset_cloady>0
    fprintf(fid,'%s\r\n','** Name: Load-1   Type: Node load');
    fprintf(fid,'%s\r\n','*Cload');
    fprintf(fid,'%s\r\n',['Set-',int2str(nset_cloady),', 2, ',num2str(Cloady(1),2),',']);
    fprintf(fid,'%s\r\n','** ');
end
if elset_dloadx>0
    fprintf(fid,'%s\r\n','** Name: Load-2   Type: Line load');
    fprintf(fid,'%s\r\n','*Dload');
    fprintf(fid,'%s\r\n',['Set-',int2str(elset_dloadx),', PX, ',num2str(Dloadx(1),2),',']);
    fprintf(fid,'%s\r\n','** ');
end
if elset_dloadx>0
    fprintf(fid,'%s\r\n','** Name: Load-2   Type: Line load');
    fprintf(fid,'%s\r\n','*Dload');
    fprintf(fid,'%s\r\n',['Set-',int2str(elset_dloady),', PY, ',num2str(Dloady(1),2),',']);
    fprintf(fid,'%s\r\n','** ');
end

%Définition de l'output
fprintf(fid,'%s\r\n','** OUTPUT REQUESTS');
fprintf(fid,'%s\r\n','** ');
fprintf(fid,'%s\r\n','** ');
fprintf(fid,'%s\r\n','** FIELD OUTPUT: F-Output-1');
fprintf(fid,'%s\r\n','** ');
fprintf(fid,'%s\r\n','*Output, field');
fprintf(fid,'%s\r\n','*Node Output');
fprintf(fid,'%s\r\n','RF, U');
fprintf(fid,'%s\r\n','*Element Output, directions=YES');
fprintf(fid,'%s\r\n','E, S');
fprintf(fid,'%s\r\n','** ');
fprintf(fid,'%s\r\n','** HISTORY OUTPUT: H-Output-1');
fprintf(fid,'%s\r\n','** ');
fprintf(fid,'%s\r\n','*Output, history, variable=PRESELECT');
fprintf(fid,'%s\r\n','*End Step');
fclose(fid);
end



%comment "nettoyer" la liste des noeuds: enlever les doublons
